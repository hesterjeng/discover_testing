(* Efficient answering of "sortedness" queries using a general
   sorting function in Imandra, an answer to a question of Kostya's.

   G.Passmore, Imandra
*)

module Sort = struct

  let rec insert (x : int) xs =
    match xs with
    | [] -> [x]
    | a :: bs ->
      if x <= a then x :: xs
      else a :: (insert x bs)

  let rec insert_sort xs =
    match xs with
    | [] -> []
    | x :: xs -> insert x (insert_sort xs)

  let rec is_sorted (x : int list) =
    match x with
    | []  -> true
    | [_] -> true
    | x :: x' :: xs -> x <= x' && is_sorted (x' :: xs)

  lemma insert_invariant a x =
    is_sorted x ==> is_sorted (insert a x)
  [@@auto] [@@rw]

  theorem insert_sort_sorts x =
    is_sorted ((insert_sort x) [@trigger])
  [@@auto] [@@rw] [@@fc]

end

lemma sorted_head_elim x xs =
  Sort.is_sorted (x :: xs) =
   match xs with
   | [] -> true
   | y::ys -> x <= y && Sort.is_sorted xs
[@@induct_term Sort.is_sorted xs] [@@rw]

lemma leq_sorted_head x xs i =
  Sort.is_sorted xs && x <= List.hd xs
  ==>
  match List.nth i xs with
  | Some a -> x <= a
  | None -> true
[@@auto] [@@rw]

lemma nth_pos_nonempty xs =
  xs <> [] ==> (List.length xs) [@trigger] >= 1
[@@auto] [@@rw] [@@fc]

lemma nth_some_in_bounds xs i =
  match List.nth i xs with
  | Some _ -> i >= 0 && i <= List.length xs - 1
  | None -> true
[@@auto] [@@rw] [@@fc]

lemma is_sorted_index_projection x i j =
  Sort.is_sorted x
  ==>
  match List.nth i x, List.nth j x with
  | Some a, Some b ->
    ((a <= b) [@trigger]) <== (i <= j)
  | _ -> true
[@@auto] [@@rw] [@@fc]

[@@@disable Sort.insert_sort]
[@@@disable List.nth]

(* Now, we can use List.nth nicely and get questions about the <=
   relationship of any i-th and j-th elements answered by projecting
   the question onto the indicies!

   So, answering these questions should all be easy and (sub-)linear,
   regardless of the number of elements.
 *)

verify (fun xs ->
  let xs = Sort.insert_sort xs in
  match List.nth 0 xs, List.nth 1 xs, List.nth 2 xs, List.nth 3 xs with
  | (Some a, Some b, Some c, Some d) ->
    a <= b && b <= c && c <= d
  | _ -> true
) [@@auto]

verify (fun xs ->
  let xs = Sort.insert_sort xs in
  match List.nth 0 xs, List.nth 1 xs, List.nth 2 xs, List.nth 3 xs,
        List.nth 4 xs, List.nth 5 xs, List.nth 6 xs, List.nth 7 xs with
  | (Some a, Some b, Some c, Some d, Some e, Some f, Some g, Some h) ->
    a <= b && b <= c && c <= d && d <= e && e <= f && f <= g && g <= h
  | _ -> true
) [@@auto]

(* Kostya's particular 3-tuple example *)

let f (x,y,z) =
  let xs = Sort.insert_sort [x;y;z] in
  match List.nth 0 xs, List.nth 1 xs, List.nth 2 xs with
  | Some a, Some b, Some c -> (a,b,c)
  | _ -> (0,0,0)

verify (fun (a1, a2, a3) ->
  let b1, b2, b3 = f (a1, a2, a3) in
  b1 <= b2 && b2 <= b3
) [@@auto]

#require "imandra-discover-bridge";;
Imandra_discover_bridge.Top.init ();;
(* let funlist = [{|List.append|};{|true|};{|List.cons|};{|subset|};];; *)
let funlist = ["true";"Sort.insert";{|Sort.is_sorted|};{|Sort.insert_sort|};];;

Imandra_discover_bridge.User_level.discover ~condition:"Sort.is_sorted" ~rewrite_schemas:false ~verbose:true db funlist;;
