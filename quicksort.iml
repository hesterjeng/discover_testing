(* #program;;
   #use "tests/testlib.iml";;
   #logic;; *)

(* A verified Quicksort in Imandra! Proved by Simon's friend Raphael *)

let rec smalls l p = match l with
| [] -> []
| hd :: tl -> if hd <= p then hd :: smalls tl p else smalls tl p

let rec bigs l p = match l with
| [] -> []
| hd :: tl -> if hd <= p then bigs tl p else hd :: bigs tl p

let rec partition l p = match l with
| [] -> ([], [])
| hd :: tl ->
  let (l1, l2) = partition tl p in
  if hd <= p then (hd :: l1, l2) else (l1, hd :: l2)
;;
jjkkjj
#require "imandra-discover-bridge";;
Imandra_discover_bridge.Top.init ();;
let funlist = [{|mirror|}; {|join|}; {|mirror_pos|};];;
#program;;
(* Imandra_discover_bridge.User_level.discover {|test|} ~num_random_checks:100 ~max_formula_size:15 ~verbose:true ~condition:"is_leaf_node" db funlist;; *)
(* Imandra_discover_bridge.User_level.discover {|test|} ~kb_completion:false ~num_random_checks:100 ~verbose:true ~condition:"is_leaf_node" db funlist;; *)
Imandra_discover_bridge.User_level.discover {|test|} ~kb_completion:false ~num_random_checks:100 ~verbose:true db funlist;;

theorem partition_smalls_bigs l p = partition l p = (smalls l p, bigs l p) [@@induct] [@@rewrite]
;;

let quicksort_measure l = Ordinal.of_int (List.length l)
;;

(* theorem smalls_length l p =
     List.length (smalls l p) [@trigger] <= List.length l
   [@@induct] [@@forward_chaining]
   ;;

      theorem bigs_length l p =
        List.length (bigs l p) [@trigger] <= List.length l
      [@@induct] [@@forward_chaining]
      ;; *)

(* let rec quicksort l = match l with
   | [] -> []
   | hd :: tl ->
     let (l1, l2) = (smalls tl hd, bigs tl hd) (\* partition tl hd *\) in
     quicksort l1 @ (hd :: quicksort l2)
     [@@ measure quicksort_measure l]
   ;;

   let rec subset l1 l2 = match l1 with
   | [] -> true
   | hd :: tl -> List.mem hd l2 && subset tl l2
   ;; *)

(* theorem subset_cons a l1 l2 =
     subset l1 l2 ==> (subset l1 (a :: l2) [@trigger]) [@@induct] [@@forward_chaining]
   ;;

   theorem subset_append l1 l2 l3 =
     subset (List.append l1 l2) l3 = (subset l1 l3 && subset l2 l3) [@@induct] [@@rewrite]
   ;;

   theorem subset_weaken_left l1 l2 l3 =
     subset l1 l2 ==> subset l1 (List.append l3 l2) [@trigger]
   [@@induct l3] [@@forward_chaining]
   ;;

   theorem mem_append a l1 l2 = List.mem a (List.append l1 l2) = (List.mem a l1 || List.mem a l2) [@@induct] [@@rewrite]
   ;;

   theorem subset_weaken_right l1 l2 l3 =
     subset l1 l2 ==> subset l1 (List.append l2 l3) [@trigger]
   [@@induct] [@@forward_chaining]
   ;;

   theorem subset_in a l1 l2 =
     (List.mem a l1 [@trigger 0n]) &&
     (subset l1 l2 [@trigger 0n]) ==>
     List.mem a l2
   [@@induct] [@@forward_chaining]
   ;;

   theorem subset_trans l1 l2 l3 =
     subset l2 l3 &&
     (subset l1 l2 [@trigger 0n]) ==>
     (subset l1 l3 [@trigger 0n]) [@@induct] [@@forward_chaining]
   ;;

   theorem bigs_subset l p = subset (bigs l p [@trigger]) l [@@induct] [@@forward_chaining]
   theorem smalls_subset l p = subset (smalls l p [@trigger]) l [@@induct] [@@forward_chaining]
   ;;

   theorem bigs_subset_weak l p = subset (bigs l p [@trigger]) (p :: l) [@@simp] [@@forward_chaining]
   theorem smalls_subset_weak l p = subset (smalls l p [@trigger]) (p :: l) [@@simp] [@@forward_chaining]
   ;;

   theorem quicksort_subset l = subset (quicksort l [@trigger]) l
   [@@induct functional quicksort] [@@forward_chaining]
   ;;

   theorem mem_insert a b l1 l2 =
     List.mem a (List.append l1 l2) ==>
     (List.mem a (List.append l1 (b :: l2)) [@trigger])
   [@@induct] [@@forward_chaining]
   ;;

   theorem subset_insert a l1 l2 l3 =
     subset l1 (List.append l2 l3) ==>
     (subset l1 (List.append l2 (a :: l3)) [@trigger])
   [@@induct l1] [@@forward_chaining]
   ;;

   theorem quicksort_superset_aux p l1 l2 l3 =
     (subset (smalls l1 p) l2 [@trigger 0n]) &&
     (subset (bigs l1 p) l3 [@trigger 0n]) ==>
     subset l1 (List.append l2 (p :: l3))
   [@@induct] [@@forward_chaining]
   ;;

   theorem quicksort_superset l = subset l (quicksort l) [@@induct functional quicksort]
   ;;

   let rec upper_bound b l = match l with
   | [] -> true
   | hd :: tl -> hd <= b && upper_bound b tl
   ;;

   let rec lower_bound b l = match l with
   | [] -> true
   | hd :: tl -> hd >= b && lower_bound b tl
   ;;

   let rec sorted = function
   | [] | [_] -> true
   | a :: (b :: l as tl) -> a <= b && sorted tl
   ;;

   theorem upper_in a p l =
     (upper_bound p l [@trigger 0n]) &&
     (List.mem a l [@trigger 0n]) ==> a <= p
   [@@induct] [@@forward_chaining]
   ;;

   theorem lower_in a p l =
     (lower_bound p l [@trigger 0n]) &&
     (List.mem a l [@trigger 0n]) ==> a >= p
   [@@induct] [@@forward_chaining]
   ;;

   (\* With current AFI, we need `l1` hint *\)
   theorem upper_subset p l1 l2 =
     (subset l1 l2 [@trigger 0n]) &&
     (upper_bound p l2 [@trigger 0n]) ==>
     upper_bound p l1
   [@@induct l1] [@@forward_chaining]
   ;;

   (\* With current AFI, we need `l1` hint *\)
   theorem lower_subset p l1 l2 =
     (subset l1 l2 [@trigger 0n]) &&
     (lower_bound p l2 [@trigger 0n]) ==>
     lower_bound p l1
   [@@induct l1] [@@forward_chaining]
   ;;

   theorem smalls_upper b l = upper_bound b (smalls l b) [@@induct] [@@rewrite]
   theorem bigs_lower b l = lower_bound b (bigs l b) [@@induct] [@@rewrite]
   ;;

   (\* With current AFI, we need `l1` hint *\)
   theorem sorted_append l1 a l2 =
     sorted (List.append l1 (a :: l2)) = (upper_bound a l1 && lower_bound a l2 && sorted l1 && sorted l2)
   [@@induct l1] [@@rewrite]
   ;;

   theorem quicksort_subset_lower p l =
     subset (quicksort l) l && lower_bound p l ==> lower_bound p (quicksort l)
     [@@simp] [@@rewrite]
   ;;

   theorem quicksort_subset_upper p l =
     subset (quicksort l) l && upper_bound p l ==> upper_bound p (quicksort l)
     [@@simp] [@@rewrite]
   ;;

   theorem quicksort_sorted l = sorted (quicksort l) [@@induct functional quicksort]
   ;;

   (\* vim:ft=imandra: *\)

   assert_true "some beautiful theorems!" true;;

   end_test();; *)
