type node = int;;
type node_with_edges = (node * node list)
type graph = node_with_edges list;;
type path = node list;;

#max_induct 1;;
(* #debug on;; *)

let empty : graph = List.empty;;

let key_of (x : node_with_edges) = fst x;;

let edges_of (x : node_with_edges) = snd x;;

#require "imandra-discover-bridge";;
open Imandra_discover_bridge.User_level;;

let all_nodes (g: graph) : node list =
    List.map (fun (x : node_with_edges) -> fst x) g;;

let graph_mem (x : node) (g : graph) = List.mem x (all_nodes g);;

let rec neighbors (n : node) (g : graph) =
    match g with
    | [] -> []
    | x :: xs ->
        if n = fst x then snd x else
        neighbors n xs;;

lemma neighbors_gen n g =
    (neighbors n g) [@trigger] <> [] ==> graph_mem n g [@@gen] [@@auto];;

let rec no_duplicates l =
    match l with
    | [] -> true
    | x :: xs -> if List.mem x xs then false else no_duplicates xs;;

let rec subset l1 l2 =
    match l1 with
    | [] -> true
    | x :: xs -> if not (List.mem x l2) then false else subset xs l2;;

lemma subset_cons x y l1 = List.mem x l1 ==> List.mem x (y :: l1) [@@auto];;

lemma subset_sing x y l1 = subset x l1 ==> subset x (y :: l1) [@@fc] [@@auto];;

lemma subset_id x0 = subset x0 x0 [@@auto];;

lemma sing_mem x x1 x2 = List.mem x x1 && subset x1 x2 ==> List.mem x x2 [@@auto] [@@fc];;

lemma subset_cons_sing2 x l = subset l (x @ l) [@@induct structural x] [@@apply subset_id l];;

lemma subset_cons_sing3 x l = subset l (x :: l) [@@auto] [@@apply subset_cons_sing2 [x] l];;

lemma subset_trans l1 l2 l3 = subset l1 l2 && subset l2 l3 ==> subset l1 l3 [@@auto] [@@fc];;

let rec is_graph1 all_nodes g =
    match g with
    | [] -> true
    | g1 :: gs ->
        (
            List.mem (fst g1) all_nodes &&
            subset (snd g1) all_nodes &&
            no_duplicates (snd g1) &&
            is_graph1 all_nodes gs
        );;


let is_graph (g : graph) =
    if g = [] then true else
    let all_nodes = all_nodes g in
    no_duplicates all_nodes && is_graph1 all_nodes g;;

let is_path (p : path) (g : graph) =
    if List.is_empty p then false else
    let rec aux path_remaining g =
        match path_remaining with
        | [] -> true
        | [x] -> if graph_mem x g then true else false
        | x :: xs ->
        (
            let next = List.hd xs in
            if not (graph_mem x g) then false else
            match neighbors x g with
            | [] -> false
            | neighbs -> if List.mem next neighbs then aux xs g else false
        ) in
    aux p g;;

let rec last l =
    match l with
    | [] -> None
    | _ :: [x] -> Some x
    | x :: xs -> last xs;;

let path_from_to p a b g =
    is_path p g && List.hd p = a && last p = Some b;;

(* lemma discover__0 x11 x0 = (is_graph x0) ==> (subset x11 x11) = (is_graph x0)   [@@auto]
   lemma discover__1 x14 x10 x0 = (is_graph x0) ==> (graph_mem x14 x0) = (graph_mem x10 x0)  [@@permutative] [@@auto]
   lemma discover__2 x13 x10 x0 = (is_graph x0) ==> (is_path x13 x0) = (graph_mem x10 x0)   [@@auto]
   lemma discover__3 x13 x14 x10 x0 = (is_graph x0) ==> (path_from_to x13 x14 x10 x0) = (graph_mem x10 x0)   [@@auto]
   lemma discover__4 x13 x14 x15 x10 x0 = (is_graph x0) ==> (path_from_to x13 x10 x14 x15) = (graph_mem x10 x0)   [@@auto] *)

(* discover db ~verbose:true ~iterations:3i ~condition:"is_graph" ~universal_condition:true ["last"; "path_from_to"; "is_path"; "is_graph"; "subset"; "neighbors"; "all_nodes"; "graph_mem"];; *)

let all_graphs g1 g2 g3 = is_graph g1 && is_graph g2;;
let cons_graphs (x : node_with_edges) (g : graph) : graph = x :: g;;
let append_graphs (g1 : graph) (g2 : graph) = g1 @ g2;;

(* This isn't working well... investigate *)
(* discover db ~verbose:true ["(&&)";"false";"true";"append_graphs";"cons_graphs";"last"; "path_from_to"; "is_path"; "is_graph"; "subset"; "neighbors"; "all_nodes"; "graph_mem"];; *)
(* This isn't working well either, can't get subset transitivity... *)
(* discover db ~iterations:2i ~verbose:true ~kb_completion:false ~rewrite_terms:false ~rewrite_schemas:false ~only_discovered:true ["(&&)";"true";"subset"]; *)


lemma gcons x y g = graph_mem x g ==> graph_mem x (cons_graphs y g) [@@auto];;

(* This doesn't work because a lot of the time we aren't able to generate random graphs *)
(* discover db ~verbose:true ~condition:"is_graph" ~kb_completion:false ~rewrite_schemas:false ~rewrite_terms:false ~universal_condition:true ["is_graph";"cons_graphs";"append_graphs";"true"];; *)

(* lemma cons_graphs_lem2 (x : node_with_edges) (g : graph) =
       no_duplicates (edges_of x) &&
       not (graph_mem (key_of x) g) &&
       subset (edges_of x) (key_of x :: (all_nodes g)) &&
       is_graph g ==> is_graph (cons_graphs x g);; *)

(* lemma graph_mem_trash2 g = is_graph g ==>
       let first = List.hd g in
       let node = fst first in
       let neighbors = snd first in
       let a_neighb = List.hd neighbors in
       graph_mem node g && graph_mem a_neighb g;; *)

lemma mem_false x = not (List.mem x []) [@@rw] [@@auto];;

let rec count_non_members1 all_nodes stack acc =
  match all_nodes with
  | [] -> acc
  (* | x :: xs -> if List.mem x stack then count_non_members1 xs stack acc else count_non_members1 xs stack (acc+1);; *)
  | x :: xs -> match List.mem x stack with
               | true -> count_non_members1 xs stack acc
               | false -> count_non_members1 xs stack (acc+1);;

lemma count_non_id stack acc = count_non_members1 [] stack acc = acc [@@auto] [@@elim];;

lemma count_non_zero nodes acc = count_non_members1 nodes [] acc = acc + List.length nodes [@@auto] [@@rw];;

lemma count_non_zero_bound_upper nodes stack acc = (count_non_members1 nodes stack acc) [@trigger] <= acc + List.length nodes [@@auto] [@@gen] [@@rw] [@@fc];;

lemma count_non_zero_bound_unit_upper nodes x acc = count_non_members1 nodes [x] acc <= acc + List.length nodes [@@auto] [@@rw];;

lemma count_non_zero_bound_unit_upper2 nodes x acc = count_non_members1 nodes [x] acc <= 1 + acc + List.length nodes [@@auto] [@@rw];;

lemma count_non_dec1_non nodes x acc =
      count_non_members1 nodes [x] acc <=
      count_non_members1 nodes [] acc [@@induct structural nodes] [@@rw];;

lemma count_non_members1_dec g x stack acc = (count_non_members1 g (x :: stack) acc) [@trigger] <= acc + List.length g [@@auto] [@@rw] [@@fc];;

lemma count_non_add g stack acc = count_non_members1 g stack (acc+1) = (count_non_members1 g stack acc) + 1 [@@auto] [@@rw];;

(* But if this holds as a hypothesis, then it means that they must be equal. *)
lemma count_non_members_key1 g stack acc x = (count_non_members1 g stack acc <=
                                            count_non_members1 g (x :: stack) acc) ==>
                                            (count_non_members1 g (x :: stack) acc) [@trigger] = count_non_members1 g stack acc [@@induct functional count_non_members1] [@@rw] [@@fc];;

(* Generalization of the previous, with different accumulators! *)
lemma count_non_members_key2 g stack acc1 acc2 x = (count_non_members1 g stack acc1 <=
                                            count_non_members1 g (x :: stack) acc1) ==>
                                            (count_non_members1 g (x :: stack) acc2) = count_non_members1 g stack acc2 [@@induct functional count_non_members1] [@@fc];;

lemma count_non_lemma1 all stack acc = (count_non_members1 all stack acc) [@trigger] >= acc [@@rw] [@@auto] [@@fc] [@@gen];;

(* lemma count_non_members_nonneg g stack = count_non_members g stack >= 0 [@@auto] [@@fc] [@@apply count_non_lemma1 (all_nodes g) stack 1];;

   lemma count_non_members_concat_nonneg g1 g2 stack = count_non_members (g1 :: g2) stack >= 0 [@@auto] [@@fc] [@@apply count_non_members_nonneg (g1 :: g2) stack];;

   lemma count_non_members_bound g stack = (count_non_members g stack) [@trigger] <= List.length (all_nodes g) [@@auto] [@@rw] [@@gen] [@@fc];; *)

lemma adm_lemma0 gen_1 stack nbs1 = count_non_members1 gen_1 stack 1 <=
    count_non_members1 gen_1 (nbs1 :: stack) 1 ==>
    ((count_non_members1 gen_1 (nbs1 :: stack) 1 = count_non_members1 gen_1 stack 1) [@trigger] ||
    stack <> []) [@@auto] [@@rewrite] [@@fc];;

lemma adm_lemma1 gen_2 stack gen_1 = count_non_members1 gen_2 stack 1 <= count_non_members1 gen_2 gen_1 0 ==>
                                     (count_non_members1 gen_2 gen_1 0 = count_non_members1 gen_2 stack 1) [@trigger] ||
                                     stack <> [] [@@auto] [@@rw] [@@fc];;

lemma adm_lemma2_1 g stack x acc = count_non_members1 g stack acc <= count_non_members1 g (x :: stack) acc ==>
                                   (count_non_members1 g (x :: stack) acc) [@trigger] = count_non_members1 g stack acc [@@auto] [@@rw] [@@fc];;

(* lemma adm_lemma2 g stack x = count_non_members g stack <= count_non_members g (x :: stack) ==>
                               (count_non_members g (x :: stack)) [@trigger] = count_non_members g stack [@@auto] [@@rw] [@@fc];; *)

(* lemma adm_lemma g1 g2 nbs1 stack = (count_non_members (g1 :: g2) stack <= count_non_members (g1 :: g2) (nbs1 :: stack)) ==>
                       List.mem nbs1 stack || count_non_members (g1 :: g2) (nbs1 :: stack) = count_non_members (g1 :: g2) stack [@@auto] [@@rw] [@@disable count_non_members];; *)

lemma adm_lemma3_helper g stack x acc1 acc2 = count_non_members1 g stack acc1 <= count_non_members1 g (x :: stack) acc1 ==>
                                              count_non_members1 g stack acc2 <= count_non_members1 g (x :: stack) acc2
                                              [@@auto] [@@fc];;

lemma adm_lemma3_1 g1 g2 x stack acc = List.mem x g2 && count_non_members1 (g1 :: g2) stack acc <= count_non_members1 (g1 :: g2) (x :: stack) acc ==> List.mem x stack [@@auto] [@@fc];;
lemma adm_lemma3_2 g x stack acc = List.mem x g && count_non_members1 g stack acc <= count_non_members1 g (x :: stack) acc ==> List.mem x stack [@@induct functional count_non_members1] [@@fc];;

lemma adm_lemma4 g x stack acc = count_non_members1 g stack (acc+1) <= count_non_members1 g (x :: stack) acc ==>
                                 List.mem x stack [@@auto] [@@fc];;

let find_next_step_measure g stack rmder =
  Ordinal.pair
      (Ordinal.of_int ((count_non_members1 (all_nodes g) stack 0) + 1))
      (Ordinal.of_int (List.length rmder));;

let count_non_members g stack =
  let all_nodes = all_nodes g in
  count_non_members1 all_nodes stack 0;;

let rec find_next_step (nbs : node list) (stack : path) (b : node) (g : graph) =
    if List.mem b nbs then Some (List.rev (b ::stack)) else
    match nbs with
    | [] -> None
    | x :: xs ->
        if List.mem x stack then find_next_step xs stack b g else
        let temp = find_next_step (neighbors x g) (x :: stack) b g in
        if Option.is_none temp then find_next_step xs stack b g else temp
        [@@measure find_next_step_measure g stack nbs] [@@auto];;

let find_path a b g =
    if not (graph_mem a g) then None else
    if not (graph_mem b g) then None else
    if a = b then Some [a] else
    find_next_step (neighbors a g) [a] b g;;

let is_large_graph g = is_graph g && List.length g > 3 && List.for_all (fun x -> not (List.is_empty (snd x))) g;;

lemma path_correctness_lemma_gen nbs stack b g =
        match (find_next_step nbs stack b g) [@trigger] with
        | Some p -> p <> []
        | None -> true [@@rw] [@@fc] [@@auto];;

let a : int = 1;;
let b : int = 0;;
let g1 : (node * node list) = (1, [0]);;
let g2 : node_with_edges list = [(0, [3])];;
let path = find_path a b (g1 :: g2);;
let reseser = match path with
  | Some p -> is_path p (g1 :: g2)
  | None -> true;;

(* Before generalization *)
(*  H0. List.mem b (List.map key_of g2)
   |---------------------------------------------------------------------------
    C0. Is_a(None, find_next_step g1.1 [g1.0] b (g1 :: g2))
    C1. g1.0 = b
    C2. rec_fun.is_path.aux.0
        (Option.get (find_next_step g1.1 [g1.0] b (g1 :: g2))) (g1 :: g2) *)

(* lemma find_path_is_path_lemma_cons a b g1 g2 =
       graph_mem b g2 ==>
       match find_path a b (g1 :: g2) with
       | Some p -> is_path p (g1 :: g2)
       | None -> true [@@simp] [@@induct functional is_path];; *)

(* lemma find_path_is_path a b g =
       match find_path a b g with
       | Some p -> is_path p g
       | None -> true [@@auto];; *)

(* lemma find_step_is_path nbs stack b g =
       graph_mem b g ==>
       match find_next_step nbs stack b g with
       | Some p -> is_path p g
       | None -> true [@@auto];; *)

theorem path_correctness a b g =
    match find_path a b g with
    | Some p -> path_from_to p a b g
    | None -> true [@@auto];;
